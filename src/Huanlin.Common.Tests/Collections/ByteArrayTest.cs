using Huanlin.Collections;
using NUnit.Framework;
using System;
using System.Text;

namespace Huanlin.Common.Tests.Collections;

/// <summary>
/// Generated by Gemini CLI.
/// </summary>
[TestFixture]
public class ByteArrayTest
{
    [Test]
    public void Constructor_Empty()
    {
        ByteArray ba = new ByteArray();
        Assert.That(ba.IsEmpty, Is.True);
        Assert.That(ba.Bytes, Is.Null);
        Assert.That(ba.Text, Is.EqualTo(""));
    }

    [Test]
    public void Constructor_Bytes()
    {
        byte[] testBytes = { 0x01, 0x02, 0x03 };
        ByteArray ba = new ByteArray(testBytes);
        Assert.That(ba.IsEmpty, Is.False);
        Assert.That(ba.Bytes, Is.EqualTo(testBytes));
    }

    [Test]
    public void Constructor_String()
    {
        string testString = "Hello";
        ByteArray ba = new ByteArray(testString);
        Assert.That(ba.IsEmpty, Is.False);
        Assert.That(ba.Text, Is.EqualTo(testString));
        Assert.That(ba.Bytes, Is.EqualTo(Encoding.Default.GetBytes(testString)));
    }

    [Test]
    public void Constructor_StringWithEncoding()
    {
        string testString = "你好";
        Encoding encoding = Encoding.UTF8;
        ByteArray ba = new ByteArray(testString, encoding);
        Assert.That(ba.IsEmpty, Is.False);
        Assert.That(ba.Text, Is.EqualTo(testString));
        Assert.That(ba.Bytes, Is.EqualTo(encoding.GetBytes(testString)));
        Assert.That(ba.Encoding, Is.EqualTo(encoding));
    }

    [Test]
    public void IsEmpty_Property()
    {
        ByteArray ba = new ByteArray();
        Assert.That(ba.IsEmpty, Is.True);

        ba.Bytes = new byte[0];
        Assert.That(ba.IsEmpty, Is.True);

        ba.Bytes = new byte[] { 0x01 };
        Assert.That(ba.IsEmpty, Is.False);
    }

    [Test]
    public void Bytes_Property_GetSet()
    {
        ByteArray ba = new ByteArray();
        byte[] testBytes = { 0x0A, 0x0B, 0x0C };
        ba.Bytes = testBytes;
        Assert.That(ba.Bytes, Is.EqualTo(testBytes));
    }

    [Test]
    public void Bytes_Property_MinMaxBytes()
    {
        ByteArray ba = new ByteArray("1234567890"); // 10 bytes
        ba.MinBytes = 15;
        Assert.That(ba.Bytes.Length, Is.EqualTo(15));

        ba = new ByteArray("1234567890"); // 10 bytes
        ba.MaxBytes = 5;
        Assert.That(ba.Bytes.Length, Is.EqualTo(5));
        Assert.That(ba.Text, Is.EqualTo("12345"));

        ba = new ByteArray("1234567890"); // 10 bytes
        ba.MinBytes = 5;
        ba.MaxBytes = 15;
        Assert.That(ba.Bytes.Length, Is.EqualTo(10)); // Should not change if within range
    }

    [Test]
    public void Text_Property_GetSet()
    {
        ByteArray ba = new ByteArray();
        string testString = "Test String";
        ba.Text = testString;
        Assert.That(ba.Text, Is.EqualTo(testString));
        Assert.That(ba.Bytes, Is.EqualTo(Encoding.Default.GetBytes(testString)));
    }

    [Test]
    public void HexString_Property_GetSet()
    {
        ByteArray ba = new ByteArray();
        string hexString = "0102030A0B0C";
        ba.HexString = hexString;
        Assert.That(ba.HexString.ToLower(), Is.EqualTo(hexString.ToLower()));
        Assert.That(ba.Bytes, Is.EqualTo(new byte[] { 0x01, 0x02, 0x03, 0x0A, 0x0B, 0x0C }));

        ba.Bytes = new byte[] { 0xFF, 0xEE, 0xDD };
        Assert.That(ba.HexString.ToLower(), Is.EqualTo("ffeedd"));
    }

    [Test]
    public void Base64String_Property_GetSet()
    {
        ByteArray ba = new ByteArray();
        string base64String = "AQID"; // Base64 for 0x01, 0x02, 0x03
        ba.Base64String = base64String;
        Assert.That(ba.Base64String, Is.EqualTo(base64String));
        Assert.That(ba.Bytes, Is.EqualTo(new byte[] { 0x01, 0x02, 0x03 }));

        ba.Bytes = new byte[] { 0xDE, 0xAD, 0xBE, 0xEF };
        Assert.That(ba.Base64String, Is.EqualTo("3q2+7w=="));
    }

    [Test]
    public void ToString_Method()
    {
        string testString = "Hello World";
        ByteArray ba = new ByteArray(testString);
        Assert.That(ba.ToString(), Is.EqualTo(testString));
    }

    [Test]
    public void ToBase64String_Method()
    {
        byte[] testBytes = { 0x01, 0x02, 0x03 };
        ByteArray ba = new ByteArray(testBytes);
        Assert.That(ba.ToBase64String(), Is.EqualTo("AQID"));
    }

    [Test]
    public void ToHexString_Method()
    {
        byte[] testBytes = { 0x12, 0xAB, 0xCD };
        ByteArray ba = new ByteArray(testBytes);
        Assert.That(ba.ToHexString().ToLower(), Is.EqualTo("12abcd"));
    }
}