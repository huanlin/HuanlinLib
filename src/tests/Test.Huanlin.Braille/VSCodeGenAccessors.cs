// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Huanlin.Braille.UnitTest
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Huanlin_Braille_BrailleProcesserAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Huanlin.Braille.BrailleProcessor));
    
    internal Huanlin_Braille_BrailleProcesserAccessor(global::Huanlin.Braille.BrailleProcessor target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Collections.Hashtable m_Tags {
        get {
            global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateObject.GetField("m_Tags")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_Tags", value);
        }
    }
    
    internal void OnConvertionFailed(global::Huanlin.Braille.ConvertionFailedEventArgs args) {
        object[] _args = new object[] {
                args};
        m_privateObject.Invoke("OnConvertionFailed", new System.Type[] {
                    typeof(global::Huanlin.Braille.ConvertionFailedEventArgs)}, _args);
    }
    
    internal void OnWordProgressed(global::System.EventArgs args) {
        object[] _args = new object[] {
                args};
        m_privateObject.Invoke("OnWordProgressed", new System.Type[] {
                    typeof(global::System.EventArgs)}, _args);
    }
    
    internal string PreprocessTags(string line) {
        object[] args = new object[] {
                line};
        string ret = ((string)(m_privateObject.Invoke("PreprocessTags", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string MatchedTagFound(global::System.Text.RegularExpressions.Match token) {
        object[] args = new object[] {
                token};
        string ret = ((string)(m_privateObject.Invoke("MatchedTagFound", new System.Type[] {
                    typeof(global::System.Text.RegularExpressions.Match)}, args)));
        return ret;
    }
    
    internal int CalcBreakPoint(global::Huanlin.Braille.BrailleLine brLine, int cellsPerLine, out bool needHyphen) {
        object[] args = new object[] {
                brLine,
                cellsPerLine,
                null};
        int ret = ((int)(m_privateObject.Invoke("CalcBreakPoint", new System.Type[] {
                    typeof(global::Huanlin.Braille.BrailleLine),
                    typeof(int),
                    typeof(bool).MakeByRefType()}, args)));
        needHyphen = ((bool)(args[2]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Huanlin_TextServices_Chinese_ZhuyinAccessor : BaseAccessor {

    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Huanlin.TextServices.Chinese.Zhuyin));
    
    internal Huanlin_TextServices_Chinese_ZhuyinAccessor(global::Huanlin.TextServices.Chinese.Zhuyin target) : 
            base(target, m_privateType) {
    }

    internal global::Huanlin.TextServices.Chinese.ZhuyinTone m_Tone
    {
        get {
            global::Huanlin.TextServices.Chinese.ZhuyinTone ret = ((global::Huanlin.TextServices.Chinese.ZhuyinTone)(m_privateObject.GetField("m_Tone")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_Tone", value);
        }
    }
    
    internal char[] m_Symbols {
        get {
            char[] ret = ((char[])(m_privateObject.GetField("m_Symbols")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_Symbols", value);
        }
    }
    
    internal static string AllSymbols {
        get {
            string ret = ((string)(m_privateType.GetStaticField("AllSymbols")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("AllSymbols", value);
        }
    }
    
    internal static string Consonants {
        get {
            string ret = ((string)(m_privateType.GetStaticField("Consonants")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("Consonants", value);
        }
    }
    
    internal static string MiddleVowels {
        get {
            string ret = ((string)(m_privateType.GetStaticField("MiddleVowels")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("MiddleVowels", value);
        }
    }
    
    internal static string EndVowels {
        get {
            string ret = ((string)(m_privateType.GetStaticField("EndVowels")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("EndVowels", value);
        }
    }
    
    internal static string[] JoinedVowels {
        get {
            string[] ret = ((string[])(m_privateType.GetStaticField("JoinedVowels")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("JoinedVowels", value);
        }
    }
    
    internal static string Tones {
        get {
            string ret = ((string)(m_privateType.GetStaticField("Tones")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("Tones", value);
        }
    }
    
    internal void Parse(string zhuyinStr) {
        object[] args = new object[] {
                zhuyinStr};
        m_privateObject.Invoke("Parse", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal bool Validate() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("Validate", new System.Type[0], args)));
        return ret;
    }
    
    internal char GetToneChar() {
        object[] args = new object[0];
        char ret = ((char)(m_privateObject.Invoke("GetToneChar", new System.Type[0], args)));
        return ret;
    }
}
}
