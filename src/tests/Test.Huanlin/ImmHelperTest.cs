// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace Test.Huanlin
{
    /// <summary>
    ///This is a test class for HuanlinLib.Helpers.ImmHelper and is intended
    ///to contain all HuanlinLib.Helpers.ImmHelper Unit Tests
    ///</summary>
    [TestClass()]
    public class ImmHelperTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetPhoneticCode (string)
        ///</summary>
        [TestMethod()]
        public void GetPhoneticCodeTest()
        {
            string aChineseText = "天龍八部";
            // 注意: ㄊㄧㄢ後面接著的不是全形空白，而是一聲的符號 (0x02c9)。用 Visual Studio 的 watch 視窗可以看得出來。
            string expected = "ㄊㄧㄢˉㄌㄨㄥˊㄅ　ㄚˉㄅㄨ　ˋ";
            string actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");

            // 測試破音字是否會根據常用片語傳回正確的字根。
            aChineseText = "一兵一卒";
            expected = "　ㄧ　ˋㄅㄧㄥˉ　ㄧ　ˋㄗㄨ　ˊ";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");

            // 測試 ImmPhrase.tbl（擴充片語字根表）。
            aChineseText = "什麼給付什麼";
            expected = "ㄕ　ㄜˊㄇ　ㄜ˙ㄐㄧ　ˇㄈㄨ　ˋㄕ　ㄜˊㄇ　ㄜ˙";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");

            // 測試一串中文字中夾雜非中文字的結果。

            aChineseText = "我是 M，我35歲";
            expected = "　ㄨㄛˇㄕ　　ˋ　　　　　　　　　　　　　ㄨㄛˇ　　　　　　　　ㄙㄨㄟˋ";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");


            // 測試傳入注音符號，一樣也會傳回注音符號。
            aChineseText = "ㄅ";
            expected = "ㄅ　　ˉ";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");

            // 測試簡體字。
            aChineseText = "实";
            expected = "ㄕ　　ˊ";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");

            // 測試私名號
            aChineseText = "＿＿";
            expected = "";
            actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCode(aChineseText);
            Assert.AreEqual(expected, actual, "global::Huanlin.Chinese.ImmHelper.GetPhoneticCode 傳回非預期的值。");
        }

        /// <summary>
        ///A test for GetPhoneticCodeList (string)
        ///</summary>
        [TestMethod()]
        public void GetPhoneticCodeListTest()
        {
            char aChineseWord = '的';
            string[] expected = new string[] { "ㄉ　ㄜ˙", "ㄉㄧ　ˊ", "ㄉㄧ　ˋ" };
            string[] actual = global::Huanlin.Chinese.ImmHelper.GetPhoneticCodeList(aChineseWord);
            for (int i = 0; i < expected.Length; i++)
            {
                if (!expected[i].Equals(actual[i]))
                    Assert.Fail("global::Huanlin.Chinese.ImmHelper.GetPhoneticCodeList 傳回非預期的值。");
            }
        }

        /// <summary>
        ///A test for IsChinese (char)
        ///</summary>
        [TestMethod()]
        public void IsChineseTest()
        {
            char ch = '我';
            bool expected = true;
            bool actual = global::Huanlin.Chinese.ImmHelper.IsChinese(ch);

            Assert.AreEqual(expected, actual, "Huanlin.Helpers.StrHelper.IsChinese did not return the expected value.");

            ch = 'ㄨ';
            expected = false;
            actual = global::Huanlin.Chinese.ImmHelper.IsChinese(ch);

            Assert.AreEqual(expected, actual, "Huanlin.Helpers.StrHelper.IsChinese did not return the expected value.");

            ch = '。';
            expected = false;
            actual = global::Huanlin.Chinese.ImmHelper.IsChinese(ch);

            Assert.AreEqual(expected, actual, "Huanlin.Helpers.StrHelper.IsChinese did not return the expected value.");

            ch = 'A';
            expected = false;
            actual = global::Huanlin.Chinese.ImmHelper.IsChinese(ch);

            Assert.AreEqual(expected, actual, "Huanlin.Helpers.StrHelper.IsChinese did not return the expected value.");
        }

    }


}
